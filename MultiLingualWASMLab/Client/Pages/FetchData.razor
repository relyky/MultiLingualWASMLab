@page "/fetchdata"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject IWeatherForecastApi bizApi
@inject IStringLocalizer<FetchData> loc

<PageTitle>Weather forecast</PageTitle>

<MudContainer>
  <MudText Typo=Typo.h3>@loc["Weather forecast"]</MudText>
  <MudText>@loc["This component demonstrates fetching data from the server."]</MudText>
  <MudToolBar>
    <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=HandleQuery Disabled=@f_loading>@loc["Refresh"]</MudButton>
  </MudToolBar>

  @if (f_loading)
  {
    <p><em>@loc["Loading..."]</em></p>
  }

  @if(forecastList is not null)
  {
    <MudDataGrid Items=@forecastList Class="mb-3" Loading=@f_loading>
      <Columns>
        <PropertyColumn Property="m => m.Date" Title=@loc["Date"] Format="yyyy/M/d" />
        <PropertyColumn Property="m => m.TemperatureC" Title=@loc["Temp. (C)"] HeaderStyle="text-align:center" CellStyle="text-align:center" />
        <PropertyColumn Property="m => m.TemperatureF" Title=@loc["Temp. (F)"] HeaderStyle="text-align:center" CellStyle="text-align:center" />
        <PropertyColumn Property="m => m.Summary" Title=@loc["Summary"]>
          <CellTemplate>
            @loc[context.Item.Summary!]
          </CellTemplate>
        </PropertyColumn>
      </Columns>
    </MudDataGrid>
  }

@*  @if (forecastList is not null)
  {
    <MudSimpleTable>
      <thead>
        <tr>
          <th>@loc["Date"]</th>
          <th>@loc["Temp. (C)"]</th>
          <th>@loc["Temp. (F)"]</th>
          <th>@loc["Summary"]</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var forecast in forecastList)
        {
          <tr>
            <td>@forecast.Date.ToShortDateString()</td>
            <td style="text-align:center">@forecast.TemperatureC</td>
            <td style="text-align:center">@forecast.TemperatureF</td>
            <td>@forecast.Summary</td>
          </tr>
        }
      </tbody>
    </MudSimpleTable>
  }*@
</MudContainer>

@code {
  List<WeatherForecast>? forecastList;
  bool f_loading = false;

  protected override async Task OnInitializedAsync()
  {
    await HandleQuery();
  }

  async Task HandleQuery()
  {
    f_loading = true;
    await Task.Delay(1000);
    forecastList = await bizApi.WeatherForecastAsync();
    f_loading = false;
  }
}
